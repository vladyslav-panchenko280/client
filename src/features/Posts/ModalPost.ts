import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import { addPost } from "lib/posts/addPost";
import type {
  ModalPostError,
  ModalPostInterface,
  ModalPostVisible,
  submitFuncAdd,
  submitFuncPut,
} from "lib/interfaces/ModalPost";
import type {
  Post,
  PostCategories,
  PostContent,
  PostContentSnippet,
  PostCreator,
  PostDcCreator,
  PostGuid,
  PostIsoDate,
  PostLink,
  PostPubDate,
  PostTitle,
} from "lib/interfaces/postValidator";

// Initial state for the state slice
const initialState: ModalPostInterface = {
  inputs: {
    creator: "",
    title: "",
    link: "",
    "dc:creator": "",
    content: "",
    contentSnippet: "",
    guid: "",
    categories: [],
    isoDate: "",
    pubDate: "",
  },
  properties: {
    error: "",
    isVisible: false,
    submitFunc: addPost,
  },
};

// Create a Redux slice using createSlice from @reduxjs/toolkit
const modalPostSlice = createSlice({
  name: "modalPost",
  initialState,
  reducers: {
    setCreator: (state, action: PayloadAction<PostCreator>) => {
      state.inputs.creator = action.payload;
    },
    setTitle: (state, action: PayloadAction<PostTitle>) => {
      state.inputs.title = action.payload;
    },
    setPost: (state, action: PayloadAction<Post>) => {
      state.inputs = action.payload;
    },
    setLink: (state, action: PayloadAction<PostLink>) => {
      state.inputs.link = action.payload;
    },
    setPubDate: (state, action: PayloadAction<PostPubDate>) => {
      state.inputs.pubDate = action.payload;
    },
    setDcCreator: (state, action: PayloadAction<PostDcCreator>) => {
      state.inputs["dc:creator"] = action.payload;
    },
    setContent: (state, action: PayloadAction<PostContent>) => {
      state.inputs.content = action.payload;
    },
    setContentSnippet: (state, action: PayloadAction<PostContentSnippet>) => {
      state.inputs.contentSnippet = action.payload;
    },
    setGuid: (state, action: PayloadAction<PostGuid>) => {
      state.inputs.guid = action.payload;
    },
    setCategories: (state, action: PayloadAction<PostCategories>) => {
      state.inputs.categories = action.payload;
    },
    setIsoDate: (state, action: PayloadAction<PostIsoDate>) => {
      state.inputs.isoDate = action.payload;
    },
    setResetValues: (state) => {
      state.inputs.creator = "";
      state.inputs.title = "";
      state.inputs.link = "";
      state.inputs.pubDate = "";
      state.inputs["dc:creator"] = "";
      state.inputs.content = "";
      state.inputs.contentSnippet = "";
      state.inputs.guid = "";
      state.inputs.pubDate = "";
      state.inputs.categories = [];
      state.inputs.isoDate = "";
    },
    setError: (state, action: PayloadAction<ModalPostError>) => {
      state.properties.error = action.payload;
    },
    setVisible: (state, action: PayloadAction<ModalPostVisible>) => {
      state.properties.isVisible = action.payload;
    },
    setSubmitFunc: (
      state,
      action: PayloadAction<submitFuncAdd | submitFuncPut>
    ) => {
      state.properties.submitFunc = action.payload;
    },
  },
});

// Export the action creators generated by createSlice
export const {
  setCreator,
  setTitle,
  setLink,
  setPubDate,
  setDcCreator,
  setSubmitFunc,
  setContent,
  setContentSnippet,
  setPost,
  setGuid,
  setIsoDate,
  setCategories,
  setResetValues,
  setError,
  setVisible,
} = modalPostSlice.actions;

// Export the reducer generated by createSlice
export default modalPostSlice.reducer;
