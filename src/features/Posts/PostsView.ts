import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import type {
  PostsView,
  SelectedFilterKey,
  SelectedFilterValue,
  SelectedSortField,
  SelectedSortKey,
  SelectedSortOrder,
  SortChangeValue,
} from "lib/interfaces/postsView";

// Initial state for the state slice
const initialState: PostsView = {
  sortOptions: [
    { label: "Date newest to older", value: "!isoDate" },
    { label: "Date older to newest", value: "isoDate" },
    { label: "Creator name from A to Z", value: "creator" },
    { label: "Creator name from Z to A", value: "!creator" },
    { label: "title from A to Z", value: "title" },
    { label: "title from Z to A", value: "!title" },
  ],
  filterOptions: [
    { name: "Date", value: "pubDate" },
    { name: "Creator", value: "creator" },
    { name: "Title", value: "title" },
    { name: "Categories", value: "categories" },
  ],
  selected: {
    sortKey: "",
    sortOrder: -1,
    sortField: "isoDate",
    filterKey: "",
    filterValue: "",
  },
};

// Create a Redux slice using createSlice from @reduxjs/toolkit
const postViewSlice = createSlice({
  name: "postsView",
  initialState,
  reducers: {
    setSortKey: (state, action: PayloadAction<SelectedSortKey>) => {
      state.selected.sortKey = action.payload;
    },
    setSortOrder: (state, action: PayloadAction<SelectedSortOrder>) => {
      state.selected.sortOrder = action.payload;
    },
    setSortField: (state, action: PayloadAction<SelectedSortField>) => {
      state.selected.sortField = action.payload;
    },
    setFilterKey: (state, action: PayloadAction<SelectedFilterKey>) => {
      state.selected.filterKey = action.payload;
    },
    setFilterValue: (state, action: PayloadAction<SelectedFilterValue>) => {
      state.selected.filterValue = action.payload;
    },
    sortChange: (state, action: PayloadAction<SortChangeValue>) => {
      const value = action.payload;
      if (value.indexOf("!") === 0) {
        state.selected.sortOrder = -1;
        state.selected.sortField = value.substring(1, value.length);
        state.selected.sortKey = value;
      } else {
        state.selected.sortOrder = 1;
        state.selected.sortField = value;
        state.selected.sortKey = value;
      }
    },
  },
});

// Export the action creators generated by createSlice
export const {
  setFilterKey,
  setFilterValue,
  setSortField,
  setSortOrder,
  setSortKey,
  sortChange,
} = postViewSlice.actions;

// Export the reducer generated by createSlice
export default postViewSlice.reducer;
